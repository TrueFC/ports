diff --git a/lib/vm-cmd b/lib/vm-cmd
index 8001bed..0d05d91 100644
--- a/lib/vm-cmd
+++ b/lib/vm-cmd
@@ -82,6 +82,7 @@ cmd::parse(){
         stopall)   core::stopall ;;
         console)   core::console "$@" ;;
         iso)       core::iso "$@" ;;
+        fetch)     core::iso "$@" ;;
         img)       core::img "$@" ;;
         configure) core::configure "$@" ;;
         passthru)  core::passthru ;;
diff --git a/lib/vm-core b/lib/vm-core
index e38a995..030364b 100644
--- a/lib/vm-core
+++ b/lib/vm-core
@@ -392,6 +392,7 @@ core::add_network(){
 #
 core::install(){
     local _name _iso _fulliso
+    local __n __running
 
     cmd::parse_args "$@"
     shift $?
@@ -403,6 +404,30 @@ core::install(){
     # just run start with an iso
     datastore::iso_find "_fulliso" "${_iso}" || util::err "unable to locate iso file - '${_iso}'"
     core::__start "${_name}" "${_fulliso}"
+    if [ -n "$VM_OPT_FORCE" ]; then
+	for __n in 1 1 1 1 1; do
+	    sleep $__n
+	    if [ -e "${VM_DS_PATH}/${_name}/console" ]; then
+		_console=$(head -n 1 "${VM_DS_PATH}/${_name}/console" | grep "^com" | cut -d= -f2)
+		break
+	    fi
+	done
+	[ -z "${_console}" ] && util::err "unable to locate console device for this virtual machine"
+	for __n in 10 2 1 1 1; do
+	    if echo "$_global_run" | egrep -q '^Running'; then
+		__running=true
+		break
+	    fi
+	    vm::running_load
+	    vm::running_check _global_run $_name
+	    sleep $__n
+	done
+	if $__running; then
+	    echo -e '\r' > $_console
+	else
+	    util::err "guest '$_name' could not run."
+	fi
+    fi
 }
 
 # 'vm startall'
@@ -763,7 +788,17 @@ core::rename(){
     [ -z "${_old}" -o -z "${_new}" ] && util::usage
     util::check_name "${_new}" || util::err "invalid virtual machine name - '${_name}'"
 
-    datastore::get_guest "${_new}" && util::err "directory ${VM_DS_PATH}/${_new} already exists"
+    if datastore::get_guest "${_new}"; then
+	if [ -n "$VM_OPT_FORCE" ]; then
+	    if [ "${VM_DS_ZFS}" = "1" ]; then
+		zfs::destroy_dataset $VM_DS_ZFS_DATASET/$_new
+	    else
+		rm -rf $VM_DS_PATH/$_new
+	    fi
+	else
+	    util::err "directory ${VM_DS_PATH}/${_new} already exists"
+	fi
+    fi
     datastore::get_guest "${_old}" || util::err "${_old} doesn't appear to be a valid virtual machine"
 
     # confirm guest stopped
@@ -779,8 +814,8 @@ core::rename(){
     fi
 
     # rename config file
-    mv "${VM_DS_PATH}/${_new}/${_old}.conf" "${VM_DS_PATH}/${_new}/${_new}.conf" >/dev/null 2>&1
-    [ $? -eq 0 ] || util::err "changed guest directory but failed to rename configuration file"
+    mv "${VM_DS_PATH}/${_new}/${_old}.conf" "${VM_DS_PATH}/${_new}/${_new}.conf" >/dev/null 2>&1 || \
+	util::err "changed guest directory but failed to rename configuration file"
 }
 
 # 'vm console'
@@ -856,10 +891,12 @@ core::configure(){
 #
 core::iso(){
     local _url _ds="default"
+    local _opt __force=false __installer_image
 
-    while getopts d:u _opt ; do
+    while getopts d:fu _opt ; do
         case $_opt in
             d) _ds=${OPTARG} ;;
+            f) __force=true ;;
             *) util::usage ;;
         esac
     done
@@ -869,7 +906,12 @@ core::iso(){
 
     if [ -n "${_url}" ]; then
         datastore::get_iso "${_ds}" || util::err "unable to locate path for datastore '${_ds}'"
-        fetch -o "${VM_DS_PATH}" "${_url}"
+	__installer_image=$(basename $_url)
+	if ! $__force && [ -f $VM_DS_PATH/$__installer_image ]; then
+	    util::msg "'$__installer_image' already exists"
+	else
+	    fetch -o $VM_DS_PATH "${_url}"
+	fi
     else
         datastore::iso_list
     fi
diff --git a/lib/vm-datastore b/lib/vm-datastore
index c10c9e2..d435181 100644
--- a/lib/vm-datastore
+++ b/lib/vm-datastore
@@ -116,8 +116,7 @@ datastore::add(){
 
     # save
     config::core::set "datastore_list" "${_name}" "1"
-    config::core::set "path_${_name}" "${_spec}"
-    [ $? -eq 0 ] || util::err "error saving settings to configuration file"
+    config::core::set "path_${_name}" "${_spec}" || util::err "error saving settings to configuration file"
 }
 
 # remove a datastore
@@ -139,8 +138,7 @@ datastore::remove(){
     [ -z "${_found}" ] && util::err "unable to locate the specified dataset"
 
     config::core::remove "datastore_list" "${_name}"
-    config::core::remove "path_${_name}"
-    [ $? -eq 0 ] || util::err "error removing settings from configuration file"
+    config::core::remove "path_${_name}" || util::err "error removing settings from configuration file"
 }
 
 # get the filesystem path for the specified dataset spec
@@ -345,8 +343,7 @@ datastore::iso(){
 
     # save
     config::core::set "datastore_list" "${_name}" "1"
-    config::core::set "path_${_name}" "iso:${_path}"
-    [ $? -eq 0 ] || util::err "error saving settings to configuration file"
+    config::core::set "path_${_name}" "iso:${_path}" || util::err "error saving settings to configuration file"
 }
 
 # add a datastore for img files
diff --git a/lib/vm-run b/lib/vm-run
index a8fdc27..6ba71e3 100644
--- a/lib/vm-run
+++ b/lib/vm-run
@@ -39,6 +39,7 @@ vm::run(){
     local _opts _devices _slot _install_slot _func=0 _taplist _exit _passdev
     local _com _comports _comstring _logpath="/dev/null" _bootrom _run=1
     local _ignore_msr _bhyve_options _use_wired _action
+    local __sufx __emulation
 
     cmd::parse_args "$@"
     shift $?
@@ -233,7 +234,7 @@ vm::run(){
             if echo "${_iso}" | grep -iqs '.iso$'; then
                 _iso_dev="-s ${_install_slot}:0,ahci-cd,${_iso},ro"
             else
-                _iso_dev="-s ${_install_slot}:0,ahci-hd,${_iso},ro"
+                _iso_dev="-s ${_install_slot}:0,ahci-hd,${_iso}"
             fi
         fi
 
diff --git a/lib/vm-switch-standard b/lib/vm-switch-standard
index 69afc25..02110d7 100644
--- a/lib/vm-switch-standard
+++ b/lib/vm-switch-standard
@@ -294,17 +294,21 @@ switch::standard::__configure_port(){
             # it should always be a valid name and interface.vlan-id is much easier to understand in ifconfig
             # than a bunch of vlanX interfaces
             _viface=$(ifconfig vlan create vlandev "${_port}" vlan "${_vlan}" descr "vm-vlan-${_switch}-${_vname}" name "${_vname}" group vm-vlan up 2>/dev/null)
-            [ $? -eq 0 ] || util::err "failed to create vlan interface for port ${_port} on switch ${_switch}"
+            if [ $? -ne 0 ]; then
+		util::err "failed to create vlan interface for port ${_port} on switch ${_switch}"
+	    else
+		return 0
+	    fi
         fi
 
         switch::set_viid "${_vname}" "${_viface}"
-        ifconfig ${_id} addm ${_viface} >/dev/null 2>&1
+        ifconfig ${_id} addm ${_vid} >/dev/null 2>&1 || \
+	    util::err "failed to add member ${_vid} to the virtual switch ${_switch}"
     else
         # add to bridge, nice and simple :)
-        ifconfig ${_id} addm ${_port} >/dev/null 2>&1
+        ifconfig ${_id} addm ${_port} >/dev/null 2>&1 || \
+	    util::err "failed to add member ${_port} to the virtual switch ${_switch}"
     fi
-
-    [ $? -eq 0 ] || util::err "failed to add member ${_port} to the virtual switch ${_switch}"
 }
 
 # unconfigure a local port
diff --git a/lib/vm-switch-vxlan b/lib/vm-switch-vxlan
index 6045ef9..29fc208 100644
--- a/lib/vm-switch-vxlan
+++ b/lib/vm-switch-vxlan
@@ -132,8 +132,7 @@ switch::vxlan::remove(){
     route del -net "${_maddr}/32" >/dev/null 2>&1
 
     # destroy the guest bridge
-    ifconfig ${_id} destroy >/dev/null 2>&1
-    [ $? -eq 0 ] || return 1
+    ifconfig ${_id} destroy >/dev/null 2>&1 || return 1
 
     # destroy the vxlan
     ifconfig "vxlan${_vlan}" destroy >/dev/null 2>&1
diff --git a/lib/vm-util b/lib/vm-util
index ab10e31..9c27f15 100644
--- a/lib/vm-util
+++ b/lib/vm-util
@@ -52,10 +52,8 @@ util::setup(){
 #
 util::load_module(){
     local _mod="$1"
-    kldstat -qm ${_mod} >/dev/null 2>&1
-    if [ $? -ne 0 ]; then
-        kldload ${_mod} >/dev/null 2>&1
-        [ $? -eq 0 ] || util::err "unable to load ${_mod}.ko!"
+    if ! kldstat -qm ${_mod} >/dev/null 2>&1; then
+        kldload ${_mod} >/dev/null 2>&1 || util::err "unable to load ${_mod}.ko!"
     fi
 }
 
@@ -124,11 +122,9 @@ util::restart_service(){
     local _cmd="restart"
 
     # see if it's actually running
-    service ${_serv} status >/dev/null 2>&1
-    [ $? -ne 0 ] && _cmd="start"
+    ! service ${_serv} status >/dev/null 2>&1 && _cmd="start"
 
-    service ${_serv} ${_cmd} >/dev/null 2>&1
-    [ $? -ne 0 ] && util::warn "failed to ${_cmd} service ${_serv}"
+    ! service ${_serv} ${_cmd} >/dev/null 2>&1 && util::warn "failed to ${_cmd} service ${_serv}"
 }
 
 # show version
@@ -319,15 +315,22 @@ util::log_and_write(){
 # @return int success if confirmed
 #
 util::confirm(){
-    local _msg="$1"
+    local _msg
     local _resp
 
-    while read -p "${_msg} (y/n)? " _resp; do
-        case "${_resp}" in
-            y*) return 0 ;;
-            n*) return 1 ;;
-        esac
-    done
+    cmd::parse_args "$@"
+    shift $?
+    _msg="$1"
+    if [ -n "$VM_OPT_FORCE" ]; then
+        echo "${_msg} (y/n)? y"
+    else
+        while read -p "${_msg} (y/n)? " _resp; do
+            case "${_resp}" in
+                y*) return 0 ;;
+                n*) return 1 ;;
+            esac
+        done
+    fi
 }
 
 # our own checkyesno copy
diff --git a/lib/vm-zfs b/lib/vm-zfs
index e4dd2ca..82b4867 100644
--- a/lib/vm-zfs
+++ b/lib/vm-zfs
@@ -73,8 +73,7 @@ zfs::make_dataset(){
 
     if [ -n "${_name}" -a "${VM_DS_ZFS}" = "1" ]; then
         zfs::__format_options "_opts" "${_opts}"
-        zfs create ${_opts} "${_name}"
-        [ $? -eq 0 ] || util::err "failed to create new ZFS dataset ${_name}"
+        zfs create ${_opts} "${_name}" || util::err "failed to create new ZFS dataset ${_name}"
     fi
 }
 
@@ -86,8 +85,7 @@ zfs::destroy_dataset(){
     local _name="$1"
 
     if [ -n "${_name}" -a "${VM_DS_ZFS}" = "1" ]; then
-        zfs destroy -rf "${_name}" >/dev/null 2>&1
-        [ $? -eq 0 ] || util::err "failed to destroy ZFS dataset ${_name}"
+        zfs destroy -Rrf "${_name}" >/dev/null 2>&1 || util::err "failed to destroy ZFS dataset ${_name}"
     fi
 }
 
@@ -103,8 +101,8 @@ zfs::rename_dataset(){
     local _new="$2"
 
     if [ -n "${_old}" -a -n "${_new}" -a "${VM_DS_ZFS}" = "1" ]; then
-        zfs rename "${VM_DS_ZFS_DATASET}/${_old}" "${VM_DS_ZFS_DATASET}/${_new}" >/dev/null 2>&1
-        [ $? -eq 0 ] || util::err "failed to rename ZFS dataset ${VM_DS_ZFS_DATASET}/${_old}"
+        zfs rename "${VM_DS_ZFS_DATASET}/${_old}" "${VM_DS_ZFS_DATASET}/${_new}" >/dev/null 2>&1 \
+	    || util::err "failed to rename ZFS dataset ${VM_DS_ZFS_DATASET}/${_old}"
     fi
 }
 
@@ -125,8 +123,7 @@ zfs::make_zvol(){
     [ "${_sparse}" = "1" ] && _opt="-sV"
 
     zfs::__format_options "_user_opts" "${_user_opts}"
-    zfs create ${_opt} ${_size} -o volmode=dev ${_user_opts} "${_name}"
-    [ $? -eq 0 ] || util::err "failed to create new ZVOL ${_name}"
+    zfs create ${_opt} ${_size} -o volmode=dev ${_user_opts} "${_name}" || util::err "failed to create new ZVOL ${_name}"
 }
 
 # format options for zfs commands
@@ -159,9 +156,16 @@ zfs::__format_options(){
 #
 zfs::snapshot(){
     local _name _snap
-
-    cmd::parse_args "$@"
-    shift $?
+    local __opt __force __replace=false
+
+    while getopts fr _opt; do
+         case $__opt in
+             f) __force=true ;;
+             r) __replace=true ;;
+             *) util::usage ;;
+         esac
+     done
+    shift $((OPTIND - 1))
     _name="$1"
 
     # try to get snapshot name
@@ -182,8 +186,12 @@ zfs::snapshot(){
         [ -z "${VM_OPT_FORCE}" ] && util::err "${_name} must be powered off first (use -f to override)"
     fi
 
-    zfs snapshot -r ${VM_DS_ZFS_DATASET}/${_name}@${_snap}
-    [ $? -eq 0 ] || util::err "failed to create recursive snapshot of virtual machine"
+    if $__replace; then
+	zfs list -tsnapshot ${VM_DS_ZFS_DATASET}/${_name}@${_snap} > /dev/null 2>&1 && \
+            zfs destroy ${VM_DS_ZFS_DATASET}/${_name}@${_snap}
+    fi
+    zfs snapshot -r ${VM_DS_ZFS_DATASET}/${_name}@${_snap} || \
+	util::err "failed to create recursive snapshot of virtual machine"
 }
 
 # try to remove a snapshot
@@ -246,8 +254,7 @@ zfs::rollback(){
     # list all datasets and zvols under guest
     zfs list -o name -rHt filesystem,volume ${VM_DS_ZFS_DATASET}/${_name} | \
     while read _fs; do
-        zfs rollback ${_force} ${_fs}@${_snap}
-        [ $? -ne 0 ] && exit $?
+        zfs rollback ${_force} ${_fs}@${_snap} || exit $?
     done
 }
 
@@ -352,45 +359,63 @@ zfs::image_create(){
     [ -z "${_desc}" ] && _desc="No description provided"
 
     datastore::get_guest "${_name}" || util::err "${_name} does not appear to be a valid virtual machine"
-    [ -z "${VM_ZFS}" -o -z "${VM_DS_ZFS}" ] && util::err "this command is only supported on zfs datastores"
-
-    # create the image dataset if we don't have it
-    if [ ! -e "${vm_dir}/images" ]; then
-        zfs create "${VM_ZFS_DATASET}/images" >/dev/null 2>&1
-        [ $? -eq 0 ] || util::err "failed to create image store ${VM_ZFS_DATASET}/images"
-    fi
-
-    # try to snapshot
-    zfs snapshot -r "${VM_DS_ZFS_DATASET}/${_name}@${_snap}" >/dev/null 2>&1
-    [ $? -eq 0 ] || util::err "failed to create snapshot of source dataset ${VM_DS_ZFS_DATASET}/${_name}@${_snap}"
-
-    # copy source
-    if [ -n "${_no_compress}" ]; then
-        _filename="${_uuid}.zfs"
-
-        echo "Creating guest image, this may take some time..."
-        zfs send -R "${VM_DS_ZFS_DATASET}/${_name}@${_snap}" > "${vm_dir}/images/${_filename}"
+    if [ -z "${VM_ZFS}" -o -z "${VM_DS_ZFS}" ]; then
+        # create the image dataset if we don't have it
+        if [ ! -e "${vm_dir}/images" ]; then
+            mkdir -p ${vm_dir}/images >/dev/null 2>&1
+            [ $? -ne 0 ] && util::err "failed to create image store ${vm_dir}/images"
+        fi
+        # copy source
+        if [ -n "${_no_compress}" ]; then
+            _filename="${_uuid}.tar"
+
+            echo "Creating guest image, this may take some time..."
+            tar -cf ${vm_dir}/images/${_filename} -C ${vm_dir}/${_name} .
+        else
+            _filename="${_uuid}.tar.xz"
+            echo "Creating a compressed image, this may take some time..."
+            tar -cf - -C ${vm_dir}/${_name} . | xz -T0 > ${vm_dir}/images/${_filename}
+        fi
+        [ $? -ne 0 ] && exit 1
     else
-        _filename="${_uuid}.zfs.z"
-
-        config::core::get "_compress" "compress"
-        config::core::get "_decompress" "decompress"
-
-        # use defaults if either of these settings are missing
-        # no point using user defined compress if we don't know how to decompress
-        if [ "${_compress}" = "" -o "${_decompress}" = "" ]; then
-            _compress="xz -T0"
-            _decompress="xz -d"
+        # create the image dataset if we don't have it
+        if [ ! -e "${vm_dir}/images" ]; then
+            zfs create "${VM_ZFS_DATASET}/images" >/dev/null 2>&1 || \
+		util::err "failed to create image store ${VM_ZFS_DATASET}/images"
         fi
 
-        echo "Creating a compressed image, this may take some time..."
-        zfs send -R "${VM_DS_ZFS_DATASET}/${_name}@${_snap}" | ${_compress} > "${vm_dir}/images/${_filename}"
-    fi
+        # try to snapshot
+        zfs snapshot -r "${VM_DS_ZFS_DATASET}/${_name}@${_snap}" >/dev/null 2>&1 || \
+	    util::err "failed to create snapshot of source dataset ${VM_DS_ZFS_DATASET}/${_name}@${_snap}"
+
+        # copy source
+        if [ -n "${_no_compress}" ]; then
+            _filename="${_uuid}.zfs"
+    
+            echo "Creating guest image, this may take some time..."
+            zfs send -R "${VM_DS_ZFS_DATASET}/${_name}@${_snap}" > "${vm_dir}/images/${_filename}"
+        else
+            _filename="${_uuid}.zfs.z"
+    
+            config::core::get "_compress" "compress"
+            config::core::get "_decompress" "decompress"
+    
+            # use defaults if either of these settings are missing
+            # no point using user defined compress if we don't know how to decompress
+            if [ "${_compress}" = "" -o "${_decompress}" = "" ]; then
+                _compress="xz -T0"
+                _decompress="xz -d"
+            fi
+    
+            echo "Creating a compressed image, this may take some time..."
+            zfs send -R "${VM_DS_ZFS_DATASET}/${_name}@${_snap}" | ${_compress} > "${vm_dir}/images/${_filename}"
+        fi
 
-    [ $? -ne 0 ] && exit 1
+        [ $? -ne 0 ] && exit 1
 
-    # done with the source snapshot
-    zfs destroy -r ${VM_DS_ZFS_DATASET}/${_name}@${_snap}
+        # done with the source snapshot
+        zfs destroy -r ${VM_DS_ZFS_DATASET}/${_name}@${_snap}
+    fi
 
     # create a description file
     sysrc -inqf "${vm_dir}/images/${_uuid}.manifest" "description=${_desc}" >/dev/null 2>&1
@@ -443,8 +468,20 @@ zfs::image_provision(){
 
     # check format of image
     case ${_type} in
+        tar) mkdir -p ${vm_dir}/${_name}; tar -xpf ${vm_dir}/images/${_file} -C ${vm_dir}/${_name} ;;
         zfs) cat "${vm_dir}/images/${_file}" | zfs recv "${VM_DS_ZFS_DATASET}/${_name}" ;;
-        xz)  xz -dc "${vm_dir}/images/${_file}" 2>/dev/null | zfs recv "${VM_DS_ZFS_DATASET}/${_name}" ;;
+        xz)
+            _type=${_file%.$_type}
+            case ${_type##*.} in
+            tar)
+		mkdir -p ${vm_dir}/${_name}
+                xz -dc "${vm_dir}/images/${_file}" 2>/dev/null | tar -xpf - -C ${vm_dir}/${_name}
+		;;
+            zfs)
+                 xz -dc "${vm_dir}/images/${_file}" 2>/dev/null | zfs recv "${VM_DS_ZFS_DATASET}/${_name}"
+		;;
+	    esac
+	    ;;
         z)   _decompress=$(sysrc -inqf "${vm_dir}/images/${_uuid}.manifest" decompress)
              [ -z "${_decompress}" ] && util::err "unable to locate decompression configuration"
              ${_decompress} "${vm_dir}/images/${_file}" 2>/dev/null | zfs recv "${VM_DS_ZFS_DATASET}/${_name}" ;;
@@ -454,8 +491,10 @@ zfs::image_provision(){
     # error unpacking?
     [ $? -eq 0 ] || util::err "errors occured while trying to unpackage the image file"
 
-    # remove the original snapshot
-    zfs destroy -r "${VM_DS_ZFS_DATASET}/${_name}@${_uuid%%-*}" >/dev/null 2>&1
+    if [ -z "${VM_ZFS}" -o -z "${VM_DS_ZFS}" ]; then
+        # remove the original snapshot
+        zfs destroy -r "${VM_DS_ZFS_DATASET}/${_name}@${_uuid%%-*}" >/dev/null 2>&1
+    fi
 
     # rename the guest configuration file
     mv "${VM_DS_PATH}/${_name}/${_oldname}.conf" "${VM_DS_PATH}/${_name}/${_name}.conf" >/dev/null 2>&1
diff --git a/vm.8 b/vm.8
index 7e71388..2db8c15 100644
--- a/vm.8
+++ b/vm.8
@@ -90,7 +90,8 @@
 .Nm
 .Cm install
 .Op Fl fi
-.Ar name iso
+.Op Fl f
+.Ar name img
 .Nm
 .Cm start
 .Op Fl fi
@@ -149,7 +150,7 @@
 .Ar name@snapshot
 .Pp
 .Nm
-.Cm iso
+.Cm fetch
 .Op Ar url
 .Pp
 .Nm
@@ -276,9 +277,9 @@ as required.
 # vm switch add public em0
 .Ed
 .Pp
-Download an ISO file to use for installation:
+Download an installer image file to use for installation:
 .Bd -literal -offset ident
-# vm iso ftp://ftp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.1/FreeBSD-10.1-RELEASE-amd64-disc1.iso
+# vm fetch ftp://ftp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.1/FreeBSD-10.1-RELEASE-amd64-disc1.iso
 .Ed
 .Pp
 Create a new guest using the default template and disk size, then start the
@@ -324,8 +325,8 @@ If you are running
 .Fx 10
 , there is no VGA console in
 .Xr bhyve 8 ,
-and so an unattended installation ISO is required which allows Windows to install and
-boot without any user interaction.
+and so an unattended installer image is required which allows Windows to install and
+boot without any user interaction. Instructions for creating a suitable installer image can
 Instructions for creating a suitable ISO can be found at the URL below.
 .Pp
 On
@@ -340,10 +341,10 @@ See the configuration format documentation below for more detailed information
 on configuring graphics.
 If network drivers are required, I recommend re-running the
 .Sy vm install
-command once the guest has been installed, but providing an ISO of the
-virtio-net drivers instead.
+command once the guest has been installed, but providing an installer image
+of the virtio-net drivers instead.
 .Pp
-Once the installation ISO is ready, has been placed in the
+Once the installation installer image is ready, has been placed in the
 .Pa $vm_dir/.iso
 directory, and you have the UEFI firmware, installation can be performed as
 normal.
@@ -369,7 +370,7 @@ Administrator and Test123 as the default login details.
 .Pp
 A pre-compiled copy of the UEFI firmware (BHYVE_UEFI_20160526.fd), as well as
 instructions for creating an
-unattended installation ISO can currently be obtained from
+unattended installer image can currently be obtained from
 .Lk https://people.freebsd.org/~grehan/bhyve_uefi/
 .\" ============ SUBCOMMANDS =============
 .Sh SUBCOMMANDS
@@ -591,10 +592,9 @@ We do not try to create it.
 Remove the specified datastore from the list.
 This does not destroy the directory or dataset, leaving all files intact.
 .It Cm datastore iso Ar name path
-Adds a new datastore location for storing iso files.
-Guests cannot be created in an iso store, but this provides an easy way to
-configure vm-bhyve to look in any arbitrary location on your system (or mounted
-network share) where you may want to store iso images.
+Adds a new datastore location for storing installer image files. Guests cannot be created in an
+installer image store, but this provides an easy way to configure vm-bhyve to look in any arbitrary
+location on your system (or mounted network share) where you may want to store installer images.
 .It Xo
 .Cm create
 .Op Fl d Ar datastore
@@ -651,18 +651,18 @@ for each virtual interface.
 .It Xo
 .Cm install 
 .Op Fl fi
-.Ar name Ar iso
+.Ar name Ar img
 .Xc
-Start a guest installation for the named virtual machine, using the specified
-ISO file or install disk image.
+Start a guest installation for the named virtual machine, using the
+specified installer image file.
 The
-.Ar iso
-argument should be the filename of an ISO or image file already downloaded into the
+.Ar img
+argument should be the filename of an installer image file already downloaded into the
 .Pa $vm_dir/.iso
 directory (or any media datastore), a full path, or a file in the current
 directory.
-ISO files in the default .iso store can be downloaded using the
-.Ar iso
+installer image files in the default .iso store can be downloaded using the
+.Ar fetch
 subcommand described below.
 .Pp
 By default the installation is started in the background.
@@ -672,9 +672,9 @@ command to connect and begin the installation.
 .Pp
 After installation, the guest can be rebooted and will restart using its own
 disk image to boot.
-At this point the installation ISO file is still attached, allowing you to use
+At this point the installer image file is still attached, allowing you to use
 the CD/DVD image for any post installation tasks.
-The ISO file will remain attached after each reboot until the guest is fully
+The installer image file will remain attached after each reboot until the guest is fully
 stopped.
 .Pp
 If the
@@ -688,6 +688,15 @@ This requires tmux, and the global
 setting must be set likewise.
 In interactive mode the guest is started on a foreground tmux session, but this
 can be detached using the standard tmux commands.
+.Pp
+Normally installation would be interactively done, but when work with batch
+mode by using
+.Pa installerconfig
+file (
+.Xr bsdinstall 8
+), all install process should be done non-intaractively by using the
+.Fl f
+option.
 .It Xo
 .Cm start
 .Op Fl fi
@@ -916,16 +925,16 @@ option can be passed directly into
 .Cm rollback
 .Pp
 The guest must always be stopped to use this command.
-.It Cm iso Op Ar url
-List all the ISO files currently stored in the
+.It Cm fetch Op Ar url
+List all the installer image files currently stored in the
 .Pa $vm_dir/.iso
-directory.
-This is often useful during guest installation, allowing you to copy and paste
-the ISO filename.
+directory. This is often useful during guest installation, allowing you to
+copy and paste the installer image
 .Pp
 If a
 .Sy url
-is specified, instead of listing ISO files, it attempts to download the given file using
+is specifeied, instead of listing installer image files, it attempts to
+download the given file using
 .Xr fetch 1 .
 .It Cm image list
 List available images.
@@ -934,10 +943,6 @@ create additional machines.
 All images have a globally unique ID (UUID) which is used to identify them.
 The list command shows the UUID, the original machine name, the date it was
 created and a short description of the image.
-.Pp
-Please note that these commands rely on using ZFS features to package/unpackage
-the images, and as such are only available when using a ZFS dataset as the
-storage location.
 .It Xo
 .Cm image create
 .Op Fl d Ar description
